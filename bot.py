import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import aiohttp
from datetime import datetime, timedelta
import json

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='api-key')
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# API —Ç–æ–∫–µ–Ω Travelpayouts
TRAVELPAYOUTS_TOKEN = "17ec4f9d498f71ae1b580ec256fe782c"
TRAVELPAYOUTS_MARKER = "605715" # –í–∞—à –º–∞—Ä–∫–µ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TourStates(StatesGroup):
    choosing_country = State()
    choosing_city = State()
    choosing_dates = State()
    choosing_hotel = State()

# –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
DESTINATIONS = {
    "–¢—É—Ä—Ü–∏—è üáπüá∑": {
        "code": "TR",
        "description": "–°—Ç—Ä–∞–Ω–∞ —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º–∏ –ø–ª—è–∂–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π ¬´–≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ¬ª",
        "cities": {
            "–ê–Ω—Ç–∞–ª—å—è": {
                "code": "AYT",
                "description": "‚òÄÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫—É—Ä–æ—Ä—Ç —Å –ø–µ—Å—á–∞–Ω—ã–º–∏ –ø–ª—è–∂–∞–º–∏ –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–º–∏ –æ—Ç–µ–ª—è–º–∏",
                "temp": "üå°Ô∏è +30¬∞C –ª–µ—Ç–æ–º, +15¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~4 —á–∞—Å–∞"
            },
            "–°—Ç–∞–º–±—É–ª": {
                "code": "IST",
                "description": "üïå –ì–æ—Ä–æ–¥ –Ω–∞ —Å—Ç—ã–∫–µ –ï–≤—Ä–æ–ø—ã –∏ –ê–∑–∏–∏ —Å –±–æ–≥–∞—Ç—ã–º –∫—É–ª—å—Ç—É—Ä–Ω—ã–º –Ω–∞—Å–ª–µ–¥–∏–µ–º",
                "temp": "üå°Ô∏è +25¬∞C –ª–µ—Ç–æ–º, +8¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~3.5 —á–∞—Å–∞"
            },
            "–ë–æ–¥—Ä—É–º": {
                "code": "BJV",
                "description": "‚õµ –≠–ª–∏—Ç–Ω—ã–π –∫—É—Ä–æ—Ä—Ç —Å –∂–∏–≤–æ–ø–∏—Å–Ω–æ–π –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π –∏ —è—Ö—Ç-–∫–ª—É–±–∞–º–∏",
                "temp": "üå°Ô∏è +28¬∞C –ª–µ—Ç–æ–º, +12¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~4 —á–∞—Å–∞"
            },
            "–ê–ª–∞–Ω–∏—è": {
                "code": "GZP",
                "description": "üèñÔ∏è –ö—É—Ä–æ—Ä—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –ø–ª—è–∂–∞–º–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏",
                "temp": "üå°Ô∏è +32¬∞C –ª–µ—Ç–æ–º, +16¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~4 —á–∞—Å–∞"
            },
            "–ö–µ–º–µ—Ä": {
                "code": "AYT",
                "description": "üå≤ –ö—É—Ä–æ—Ä—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –≥–æ—Ä –∏ —Å–æ—Å–Ω–æ–≤–æ–≥–æ –ª–µ—Å–∞",
                "temp": "üå°Ô∏è +29¬∞C –ª–µ—Ç–æ–º, +14¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~4 —á–∞—Å–∞"
            }
        }
    },
    "–û–ê–≠ üá¶üá™": {
        "code": "AE",
        "description": "–†–æ—Å–∫–æ—à–Ω—ã–π –æ—Ç–¥—ã—Ö –≤ —Å—Ç—Ä–∞–Ω–µ –Ω–µ–±–æ—Å–∫—Ä–µ–±–æ–≤ –∏ –≤–æ—Å—Ç–æ—á–Ω–æ–π —Å–∫–∞–∑–∫–∏",
        "cities": {
            "–î—É–±–∞–π": {
                "code": "DXB",
                "description": "üåÜ –ì–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –Ω–µ–±–æ—Å–∫—Ä–µ–±–∞–º–∏",
                "temp": "üå°Ô∏è +40¬∞C –ª–µ—Ç–æ–º, +25¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~5.5 —á–∞—Å–æ–≤"
            },
            "–ê–±—É-–î–∞–±–∏": {
                "code": "AUH",
                "description": "üïå –°—Ç–æ–ª–∏—Ü–∞ –û–ê–≠ —Å —Ä–æ—Å–∫–æ—à–Ω—ã–º–∏ –æ—Ç–µ–ª—è–º–∏ –∏ –º–µ—á–µ—Ç—è–º–∏",
                "temp": "üå°Ô∏è +38¬∞C –ª–µ—Ç–æ–º, +24¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~5.5 —á–∞—Å–æ–≤"
            },
            "–®–∞—Ä–¥–∂–∞": {
                "code": "SHJ",
                "description": "üè∫ –ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –û–ê–≠ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –º—É–∑–µ–µ–≤",
                "temp": "üå°Ô∏è +37¬∞C –ª–µ—Ç–æ–º, +23¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~5.5 —á–∞—Å–æ–≤"
            }
        }
    },
    "–¢–∞–∏–ª–∞–Ω–¥ üáπüá≠": {
        "code": "TH",
        "description": "–°—Ç—Ä–∞–Ω–∞ —É–ª—ã–±–æ–∫, —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã –∏ –¥—Ä–µ–≤–Ω–∏—Ö —Ö—Ä–∞–º–æ–≤",
        "cities": {
            "–ü—Ö—É–∫–µ—Ç": {
                "code": "HKT",
                "description": "üèùÔ∏è –ö—Ä—É–ø–Ω–µ–π—à–∏–π –æ—Å—Ç—Ä–æ–≤ —Å –±–µ–ª–æ—Å–Ω–µ–∂–Ω—ã–º–∏ –ø–ª—è–∂–∞–º–∏",
                "temp": "üå°Ô∏è +32¬∞C –∫—Ä—É–≥–ª—ã–π –≥–æ–¥",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~9 —á–∞—Å–æ–≤"
            },
            "–ë–∞–Ω–≥–∫–æ–∫": {
                "code": "BKK",
                "description": "üåÜ –°—Ç–æ–ª–∏—Ü–∞ —Å —Ö—Ä–∞–º–∞–º–∏ –∏ –Ω–æ—á–Ω—ã–º–∏ —Ä—ã–Ω–∫–∞–º–∏",
                "temp": "üå°Ô∏è +33¬∞C –∫—Ä—É–≥–ª—ã–π –≥–æ–¥",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~8.5 —á–∞—Å–æ–≤"
            },
            "–ü–∞—Ç—Ç–∞–π—è": {
                "code": "UTP",
                "description": "üéâ –ö—É—Ä–æ—Ä—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—á–Ω–æ–π –∂–∏–∑–Ω—å—é",
                "temp": "üå°Ô∏è +31¬∞C –∫—Ä—É–≥–ª—ã–π –≥–æ–¥",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~9 —á–∞—Å–æ–≤"
            }
        }
    },
    "–ï–≥–∏–ø–µ—Ç üá™üá¨": {
        "code": "EG",
        "description": "–°—Ç—Ä–∞–Ω–∞ –ø–∏—Ä–∞–º–∏–¥, –∫—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω–æ–≥–æ —Å–æ–ª–Ω—Ü–∞ –∏ –ö—Ä–∞—Å–Ω–æ–≥–æ –º–æ—Ä—è",
        "cities": {
            "–•—É—Ä–≥–∞–¥–∞": {
                "code": "HRG",
                "description": "üê† –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫—É—Ä–æ—Ä—Ç —Å –æ—Ç–ª–∏—á–Ω—ã–º —Å–Ω–æ—Ä–∫–ª–∏–Ω–≥–æ–º",
                "temp": "üå°Ô∏è +35¬∞C –ª–µ—Ç–æ–º, +22¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~5 —á–∞—Å–æ–≤"
            },
            "–®–∞—Ä–º-—ç–ª—å-–®–µ–π—Ö": {
                "code": "SSH",
                "description": "üèä‚Äç‚ôÇÔ∏è –ö—É—Ä–æ—Ä—Ç —Å –∫–æ—Ä–∞–ª–ª–æ–≤—ã–º–∏ —Ä–∏—Ñ–∞–º–∏ –∏ –¥–∞–π–≤–∏–Ω–≥–æ–º",
                "temp": "üå°Ô∏è +34¬∞C –ª–µ—Ç–æ–º, +21¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~5.5 —á–∞—Å–æ–≤"
            },
            "–≠–ª—å-–ì—É–Ω–∞": {
                "code": "HRG",
                "description": "‚õµ –≠–ª–∏—Ç–Ω—ã–π –∫—É—Ä–æ—Ä—Ç –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö —Å –∫–∞–Ω–∞–ª–∞–º–∏",
                "temp": "üå°Ô∏è +33¬∞C –ª–µ—Ç–æ–º, +20¬∞C –∑–∏–º–æ–π",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~5 —á–∞—Å–æ–≤"
            }
        }
    },
    "–ú–∞–ª—å–¥–∏–≤—ã üá≤üáª": {
        "code": "MV",
        "description": "–†–∞–π—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ —Å –±–µ–ª–æ—Å–Ω–µ–∂–Ω—ã–º–∏ –ø–ª—è–∂–∞–º–∏ –∏ –±–∏—Ä—é–∑–æ–≤—ã–º –æ–∫–µ–∞–Ω–æ–º",
        "cities": {
            "–ú–∞–ª–µ": {
                "code": "MLE",
                "description": "üèùÔ∏è –°—Ç–æ–ª–∏—Ü–∞ –∏ –≥–ª–∞–≤–Ω—ã–π –æ—Å—Ç—Ä–æ–≤ –∞—Ä—Ö–∏–ø–µ–ª–∞–≥–∞",
                "temp": "üå°Ô∏è +30¬∞C –∫—Ä—É–≥–ª—ã–π –≥–æ–¥",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~11 —á–∞—Å–æ–≤"
            },
            "–ú–∞–∞—Ñ—É—à–∏": {
                "code": "MLE",
                "description": "üèñÔ∏è –û—Å—Ç—Ä–æ–≤ —Å –±—é–¥–∂–µ—Ç–Ω—ã–º–∏ –æ—Ç–µ–ª—è–º–∏ –∏ –¥–∞–π–≤–∏–Ω–≥–æ–º",
                "temp": "üå°Ô∏è +29¬∞C –∫—Ä—É–≥–ª—ã–π –≥–æ–¥",
                "flight": "‚è∞ –ü–µ—Ä–µ–ª–µ—Ç: ~11 —á–∞—Å–æ–≤"
            }
        }
    }
}

async def fetch_hotel_prices(city_code):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –æ—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ API Travelpayouts"""
    check_in = (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")
    check_out = (datetime.now() + timedelta(days=14)).strftime("%Y-%m-%d")
    
    url = "http://engine.hotellook.com/api/v2/cache.json"
    params = {
        "location": city_code,
        "checkIn": check_in,
        "checkOut": check_out,
        "currency": "rub",
        "limit": 10,
        "token": TRAVELPAYOUTS_TOKEN
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                try:
                    data = await response.json()
                    if isinstance(data, list):
                        return data
                    return []
                except:
                    return []
            return []

def get_countries_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–∞–Ω"""
    keyboard = []
    for country in DESTINATIONS.keys():
        keyboard.append([InlineKeyboardButton(text=country, callback_data=f"country_{country}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_cities_keyboard(country: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤"""
    keyboard = []
    for city in DESTINATIONS[country]["cities"].keys():
        keyboard.append([InlineKeyboardButton(text=city, callback_data=f"city_{city}")])
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="back_to_countries")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ!\n\n"
        "üåü –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –æ—Ç–¥—ã—Ö!\n\n"
        "üíº –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
        "‚Ä¢ –ü–æ–¥–±–æ—Ä —Ç—É—Ä–∞ –ø–æ –≤–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º\n"
        "‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª–µ–π –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫—É 24/7\n"
        "‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—é –ª—É—á—à–µ–π —Ü–µ–Ω—ã\n\n"
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –∫—É–¥–∞ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è:",
        reply_markup=get_countries_keyboard()
    )
    await state.set_state(TourStates.choosing_country)

@dp.callback_query(F.data.startswith("country_"))
async def process_country_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    country = callback.data.split("_")[1]
    await state.update_data(selected_country=country)
    
    country_info = DESTINATIONS[country]
    await callback.message.edit_text(
        f"üåü {country}\n\n"
        f"‚ÑπÔ∏è {country_info['description']}\n\n"
        f"üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç–¥—ã—Ö–∞:",
        reply_markup=get_cities_keyboard(country)
    )
    await state.set_state(TourStates.choosing_city)

@dp.callback_query(F.data.startswith("city_"))
async def process_city_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    city = callback.data.split("_")[1]
    data = await state.get_data()
    country = data['selected_country']
    city_info = DESTINATIONS[country]["cities"][city]
    city_code = city_info["code"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–µ–ª–µ–π
    hotels = await fetch_hotel_prices(city_code)
    
    if not hotels:
        await callback.message.edit_text(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.\n\n"
            f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã\n"
            f"‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥\n"
            f"‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞\n\n"
            f"üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:",
            reply_markup=get_cities_keyboard(country)
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–µ–ª—è–º–∏
    keyboard = []
    for hotel in hotels[:5]:
        price = int(hotel.get('priceFrom', 0))
        hotel_name = hotel.get('hotelName', '–û—Ç–µ–ª—å')
        stars = "‚≠ê" * int(hotel.get('stars', 0))
        keyboard.append([
            InlineKeyboardButton(
                text=f"{hotel_name} {stars} - –æ—Ç {price:,}‚ÇΩ",
                callback_data=f"hotel_{country}_{city}_{hotel['hotelId']}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data=f"back_to_cities_{country}")])
    keyboard.append([InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_countries")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        f"üåü {city}\n\n"
        f"üìç {city_info['description']}\n"
        f"{city_info['temp']}\n"
        f"{city_info['flight']}\n\n"
        f"üè® –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–µ–ª–∏:\n"
        f"üí° –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –∑–∞ 7 –Ω–æ—á–µ–π –Ω–∞ –¥–≤–æ–∏—Ö\n"
        f"üìÖ –í—ã–ª–µ—Ç: {(datetime.now() + timedelta(days=7)).strftime('%d.%m.%Y')}\n",
        reply_markup=reply_markup
    )
    await state.set_state(TourStates.choosing_hotel)

@dp.callback_query(F.data.startswith("hotel_"))
async def process_hotel_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–µ–ª—è"""
    _, country, city, hotel_id = callback.data.split("_", 3)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_url = f"https://www.hotellook.ru/hotels/{hotel_id}?marker={TRAVELPAYOUTS_MARKER}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé´ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω", url=booking_url)],
        [InlineKeyboardButton(text="üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="contact_manager")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –î—Ä—É–≥–∏–µ –æ—Ç–µ–ª–∏", callback_data=f"city_{city}")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_countries")]
    ])
    
    await callback.message.edit_text(
        f"üè® –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n\n"
        f"üìç {city}, {country}\n\n"
        f"üíé –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:\n"
        f"‚Ä¢ –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ 7 –Ω–æ—á–µ–π\n"
        f"‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞\n"
        f"‚Ä¢ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∞—ç—Ä–æ–ø–æ—Ä—Ç-–æ—Ç–µ–ª—å-–∞—ç—Ä–æ–ø–æ—Ä—Ç\n"
        f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
        f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "contact_manager")
async def process_contact_manager(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± WhatsApp", url="https://wa.me/+7XXXXXXXXXX")],
        [InlineKeyboardButton(text="üì≤ Telegram", url="https://t.me/manager")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_countries")]
    ])
    
    await callback.message.edit_text(
        "üëã –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "üìß Email: manager@tourcompany.com\n\n"
        "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω-–ü—Ç: 9:00 - 20:00\n"
        "–°–±-–í—Å: 10:00 - 18:00\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "back_to_countries")
async def process_back_to_countries(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã"""
    await state.clear()
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –∫—É–¥–∞ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è:",
        reply_markup=get_countries_keyboard()
    )
    await state.set_state(TourStates.choosing_country)

@dp.callback_query(F.data.startswith("back_to_cities_"))
async def process_back_to_cities(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞"""
    country = callback.data.split("_")[3]
    await state.update_data(selected_country=country)
    await callback.message.edit_text(
        f"üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–µ {country}:",
        reply_markup=get_cities_keyboard(country)
    )
    await state.set_state(TourStates.choosing_city)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
